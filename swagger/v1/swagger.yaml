---
openapi: 3.0.1
info:
  title: Movie API
  version: v1
  description: "A REST API for managing movies and watchlists with JWT authentication.\n\n\U0001F449
    [View on GitHub](https://github.com/bambina/rails-movie-api)"
paths:
  "/api/v1/auth/login":
    post:
      summary: Login
      tags:
      - Auth
      description: Authenticate user and get JWT
      security: []
      parameters: []
      responses:
        '200':
          description: successful login
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ0eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU2NjM1NTg3fQ.DPI3DuDnx_S0G9xXZWAc4rjEluD7iSvT_nnfCQXomF4
                token_type: Bearer
                expires_in: 3600
                username: user_1
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUz...
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
                  username:
                    type: string
                    example: user1
                required:
                - token
                - token_type
                - expires_in
                - username
        '401':
          description: invalid credentials
          content:
            application/json:
              example:
                error: Invalid username or password
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username or password
                required:
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: '111'
              required:
              - username
              - password
        required: true
  "/api/v1/auth/refresh":
    post:
      summary: Refresh access token
      tags:
      - Auth
      description: Exchange a refresh token (HttpOnly cookie) for a new access token.
        Also rotates the refresh token.
      security:
      - cookieAuth: []
      responses:
        '200':
          description: ok
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyLCJ0eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU2NjM1NTg3fQ.g-py9tz1oARG3K19gejd1AqeEj7f-O8Mlu_YZ4t0TV0
                token_type: Bearer
                expires_in: 3600
                username: user_2
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUz...
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
                  username:
                    type: string
                    example: user1
                required:
                - token
                - token_type
                - expires_in
                - username
        '401':
          description: invalid or expired refresh token
          content:
            application/json:
              example:
                error: Invalid refresh token
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username or password
                required:
                - error
  "/api/v1/movies":
    get:
      summary: List movies
      tags:
      - Movies
      description: Retrieve all movies
      parameters:
      - "$ref": "#/components/parameters/page"
      - "$ref": "#/components/parameters/per_page"
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                data:
                - id: 1
                  title: Movie 1
                  description: A great movie about something interesting.
                  release_year: 2001
                  created_at: '2025-08-31T09:19:47.067Z'
                  updated_at: '2025-08-31T09:19:47.067Z'
                - id: 2
                  title: Movie 2
                  description: A great movie about something interesting.
                  release_year: 2002
                  created_at: '2025-08-31T09:19:47.068Z'
                  updated_at: '2025-08-31T09:19:47.068Z'
                meta:
                  current_page: 1
                  total_pages: 3
                  total_count: 5
                  per_page: 2
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/movie"
                  meta:
                    "$ref": "#/components/schemas/pagination_metadata"
                required:
                - data
                - meta
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    description: HTTP status code
                  error:
                    type: string
                    example: Internal Server Error
                    description: Error message
                required:
                - status
                - error
    post:
      summary: Create a movie
      tags:
      - Movies
      description: Create a new movie
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              example:
                data:
                  id: 6
                  title: Movie 6
                  description: A great movie about something interesting.
                  release_year: 2006
                  created_at: '2025-08-31T09:19:47.081Z'
                  updated_at: '2025-08-31T09:19:47.081Z'
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/movie"
                required:
                - data
        '422':
          description: Invalid request
          content:
            application/json:
              example:
                errors:
                - Title can't be blank
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Title can't be blank
                required:
                - errors
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    description: HTTP status code
                  error:
                    type: string
                    example: Internal Server Error
                    description: Error message
                required:
                - status
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie:
                  type: object
                  properties:
                    title:
                      type: string
                      example: The Matrix
                    description:
                      type: string
                      nullable: true
                      example: A computer hacker learns from mysterious rebels about
                        the true nature of his reality.
                    release_year:
                      type: integer
                      nullable: true
                      example: 1999
                  required:
                  - title
              required:
              - movie
        required: true
  "/api/v1/movies/{id}":
    get:
      summary: Get movie by ID
      tags:
      - Movies
      description: Retrieve a specific movie by ID
      parameters:
      - name: id
        in: path
        description: Movie ID
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie found
          content:
            application/json:
              example:
                data:
                  id: 7
                  title: Movie 7
                  description: A great movie about something interesting.
                  release_year: 2007
                  created_at: '2025-08-31T09:19:47.090Z'
                  updated_at: '2025-08-31T09:19:47.090Z'
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/movie"
                required:
                - data
        '404':
          description: Movie not found
          content:
            application/json:
              example:
                error:
                  message: Movie not found
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Movie not found
                    required:
                    - message
                required:
                - error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    description: HTTP status code
                  error:
                    type: string
                    example: Internal Server Error
                    description: Error message
                required:
                - status
                - error
    delete:
      summary: Delete movie by ID
      tags:
      - Movies
      description: Delete a specific movie by ID
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: Movie ID
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Movie deleted successfully
        '404':
          description: Movie not found
          content:
            application/json:
              example:
                error:
                  message: Movie not found
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Movie not found
                    required:
                    - message
                required:
                - error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    description: HTTP status code
                  error:
                    type: string
                    example: Internal Server Error
                    description: Error message
                required:
                - status
                - error
    patch:
      summary: Update movie (partial update)
      tags:
      - Movies
      description: Partially update movie information
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: Movie ID
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              example:
                data:
                  title: Partially Updated Title
                  release_year: 2009
                  id: 9
                  description: A great movie about something interesting.
                  created_at: '2025-08-31T09:19:47.120Z'
                  updated_at: '2025-08-31T09:19:47.124Z'
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/movie"
                required:
                - data
        '404':
          description: Movie not found
          content:
            application/json:
              example:
                error:
                  message: Movie not found
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Movie not found
                    required:
                    - message
                required:
                - error
        '422':
          description: Invalid request
          content:
            application/json:
              example:
                errors:
                - Title can't be blank
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Title can't be blank
                required:
                - errors
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    description: HTTP status code
                  error:
                    type: string
                    example: Internal Server Error
                    description: Error message
                required:
                - status
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie:
                  type: object
                  properties:
                    title:
                      type: string
                      example: The Matrix Revolutions
                    description:
                      type: string
                      nullable: true
                      example: The human city of Zion defends itself against the massive
                        invasion of the machines.
                    release_year:
                      type: integer
                      nullable: true
                      example: 2003
              required:
              - movie
        required: true
    put:
      summary: Update movie (full update)
      tags:
      - Movies
      description: Fully update movie information
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: Movie ID
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              example:
                data:
                  title: Updated Title
                  description: Updated description
                  release_year: 2011
                  id: 11
                  created_at: '2025-08-31T09:19:47.136Z'
                  updated_at: '2025-08-31T09:19:47.140Z'
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/movie"
                required:
                - data
        '404':
          description: Movie not found
          content:
            application/json:
              example:
                error:
                  message: Movie not found
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Movie not found
                    required:
                    - message
                required:
                - error
        '422':
          description: Invalid request
          content:
            application/json:
              example:
                errors:
                - Title can't be blank
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Title can't be blank
                required:
                - errors
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                    description: HTTP status code
                  error:
                    type: string
                    example: Internal Server Error
                    description: Error message
                required:
                - status
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie:
                  type: object
                  properties:
                    title:
                      type: string
                      example: The Matrix
                    description:
                      type: string
                      nullable: true
                      example: A computer hacker learns from mysterious rebels about
                        the true nature of his reality.
                    release_year:
                      type: integer
                      nullable: true
                      example: 1999
                  required:
                  - title
              required:
              - movie
        required: true
servers:
- url: "/"
  description: Default server (works for both dev and prod)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your JWT token (no "Bearer " prefix).
    cookieAuth:
      type: apiKey
      in: cookie
      name: refresh_token
  schemas:
    movie:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: The Matrix
        description:
          type: string
          nullable: true
          example: A computer hacker learns about....
        release_year:
          type: integer
          nullable: true
          example: 1999
        created_at:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-02T00:00:00Z'
      required:
      - id
      - title
      - created_at
      - updated_at
    pagination_metadata:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 3
        total_count:
          type: integer
          example: 50
        per_page:
          type: integer
          example: 10
      required:
      - current_page
      - total_pages
      - total_count
      - per_page
  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
      description: 'Page number (default: 1)'
      required: false
      example: 1
    per_page:
      name: per_page
      in: query
      schema:
        type: integer
      description: 'Items per page (default: 2, max: 100)'
      required: false
      example: 2
